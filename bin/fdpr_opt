#!/bin/sh
# performs FDPR optimization
# invocation: fdpr_opt <prog> <arg> ...
# environment:
# FDPR_BINDIR -   directory containing fdprpro executable 
# FDPR_SONAME - if present, the shared library to process
# FDPR_OPT_FLAGS - instrumentation flags
# FDPR_OUTPUT_PATH  directory containing optimized libraries 
# input:
# <prog> - input program
# <prog>.prof - profile
# output:
# <prog>.fdpr - instrumented program
# returns:
# status of optimization run

if [ "$FDPR_BINDIR" = "" ]; then
	FDPR_BINDIR=$(dirname $(which $0))
	export FDPR_BINDIR
fi

FDPR_ECHO=echo
if [ "$1" = "--quiet" ]; then
	FDPR_ECHO=true
	shift
fi

FDPR_HIDDEN=$HOME/.fdpr
mkdir -p $FDPR_HIDDEN

in=$1
if [ "$FDPR_SONAME" != "" ]; then in="$FDPR_SONAME"; fi
if [ "$in" = "" -o ! -r "$in" ]; then echo "fdpr_opt: missing or non-existent input program: $in" >&2; exit 1; fi
if [ "$FDPR_DL_BINDIR" = "" ]; then FDPR_DL_BINDIR=/opt/ibm/fdprpro/bin; fi
if [ "$FDPR_OPT_FLAGS" = "" ]; then FDPR_OPT_FLAGS="-O3 -w 2 -q"; fi

# retrieve profile from its save area
saved_prof=$FDPR_HIDDEN/`basename "$in"`.prof
prof="$in".prof
view_prof="$prof"
if [ -r "$saved_prof" ]; then
    prof="$saved_prof"
fi

$FDPR_ECHO $FDPR_BINDIR/fdpr_dl.py -a opt -p "$in" -f "$view_prof" -o "$in".fdpr $FDPR_OPT_FLAGS
$FDPR_BINDIR/fdpr_dl.py -a opt -p "$in" -f "$prof" -o "$in".fdpr $FDPR_OPT_FLAGS
